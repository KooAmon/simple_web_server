use std::fmt::{Display, Formatter, Result};

#[allow(dead_code)]
pub enum HttpStatusCode {
    Ok = 200,
    Created = 201,
    Accepted = 202,
    NoContent = 204,
    MovedPermanently = 301,
    Found = 302,
    NotModified = 304,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,
    BadRequest = 400,
    Unauthorized = 401,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PayloadTooLarge = 413,
    UriTooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarly = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

impl Display for HttpStatusCode {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        match self {
            Self::Ok => write!(f, "200 OK"),
            Self::Created => write!(f, "201 Created"),
            Self::Accepted => write!(f, "202 Accepted"),
            Self::NoContent => write!(f, "204 No Content"),
            Self::MovedPermanently => write!(f, "301 Moved Permanently"),
            Self::Found => write!(f, "302 Found"),
            Self::NotModified => write!(f, "304 Not Modified"),
            Self::TemporaryRedirect => write!(f, "307 Temporary Redirect"),
            Self::PermanentRedirect => write!(f, "308 Permanent Redirect"),
            Self::BadRequest => write!(f, "400 Bad Request"),
            Self::Unauthorized => write!(f, "401 Unauthorized"),
            Self::Forbidden => write!(f, "403 Forbidden"),
            Self::NotFound => write!(f, "404 Not Found"),
            Self::MethodNotAllowed => write!(f, "405 Method Not Allowed"),
            Self::NotAcceptable => write!(f, "406 Not Acceptable"),
            Self::RequestTimeout => write!(f, "408 Request Timeout"),
            Self::Conflict => write!(f, "409 Conflict"),
            Self::Gone => write!(f, "410 Gone"),
            Self::LengthRequired => write!(f, "411 Length Required"),
            Self::PayloadTooLarge => write!(f, "413 Payload Too Large"),
            Self::UriTooLong => write!(f, "414 URI Too Long"),
            Self::UnsupportedMediaType => write!(f, "415 Unsupported Media Type"),
            Self::RangeNotSatisfiable => write!(f, "416 Range Not Satisfiable"),
            Self::ExpectationFailed => write!(f, "417 Expectation Failed"),
            Self::ImATeapot => write!(f, "418 I'm a teapot"),
            Self::MisdirectedRequest => write!(f, "421 Misdirected Request"),
            Self::UnprocessableEntity => write!(f, "422 Unprocessable Entity"),
            Self::Locked => write!(f, "423 Locked"),
            Self::FailedDependency => write!(f, "424 Failed Dependency"),
            Self::TooEarly => write!(f, "425 Too Early"),
            Self::UpgradeRequired => write!(f, "426 Upgrade Required"),
            Self::PreconditionRequired => write!(f, "428 Precondition Required"),
            Self::TooManyRequests => write!(f, "429 Too Many Requests"),
            Self::RequestHeaderFieldsTooLarge => write!(f, "431 Request Header Fields Too Large"),
            Self::UnavailableForLegalReasons => write!(f, "451 Unavailable For Legal Reasons"),
            Self::InternalServerError => write!(f, "500 Internal Server Error"),
            Self::NotImplemented => write!(f, "501 Not Implemented"),
            Self::BadGateway => write!(f, "502 Bad Gateway"),
            Self::ServiceUnavailable => write!(f, "503 Service Unavailable"),
            Self::GatewayTimeout => write!(f, "504"),
            Self::HTTPVersionNotSupported => write!(f, "505 HTTP Version Not Supported"),
            Self::VariantAlsoNegotiates => write!(f, "506 Variant Also Negotiates"),
            Self::InsufficientStorage => write!(f, "507 Insufficient Storage"),
            Self::LoopDetected => write!(f, "508 Loop Detected"),
            Self::NotExtended => write!(f, "510 Not Extended"),
            Self::NetworkAuthenticationRequired => write!(f, "511 Network Authentication Required"),
        }
    }
}